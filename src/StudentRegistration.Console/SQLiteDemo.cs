using StudentRegistration.Infrastructure.Repositories;
using StudentRegistration.Domain.Entities;
using StudentRegistration.Application.Services;
using StudentRegistration.Application.Interfaces;

namespace StudentRegistration.Console
{
    /// <summary>
    /// Demo SQLite implementation c·ªßa EnrollmentRepository
    /// </summary>
    public class SQLiteDemo
    {
        public static async Task RunDemo()
        {
            System.Console.WriteLine("üóÑÔ∏è  DEMO SQLITE ENROLLMENT REPOSITORY");
            System.Console.WriteLine("=====================================");

            // T·∫°o SQLite repository v·ªõi database file
            var repository = new SQLiteEnrollmentRepository("Data Source=demo_student_reg.db");
            var ruleChecker = new MaxEnrollmentRuleChecker(repository);

            // Test data
            var studentId = Guid.Parse("11111111-1111-1111-1111-111111111111");
            var semesterId = Guid.Parse("20240000-0000-0000-0000-000000000000");
            var courseId = Guid.Parse("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa");
            var sectionId = Guid.Parse("cccccccc-cccc-cccc-cccc-cccccccccccc");

            try
            {
                // B∆∞·ªõc 1: Ki·ªÉm tra enrollment hi·ªán t·∫°i
                System.Console.WriteLine("\nüìä B∆∞·ªõc 1: Ki·ªÉm tra enrollment hi·ªán t·∫°i");
                var currentEnrollments = await repository.GetEnrollmentsByStudentInSemesterAsync(studentId, semesterId);
                System.Console.WriteLine($"   S·ªë enrollment hi·ªán t·∫°i: {currentEnrollments.Count()}");

                // B∆∞·ªõc 2: Th√™m enrollment m·ªõi
                System.Console.WriteLine("\n‚ûï B∆∞·ªõc 2: Th√™m enrollment m·ªõi");
                var classSection = new ClassSection(sectionId, courseId, "Demo Course", "DEMO101");
                var newEnrollment = new Enrollment(studentId, sectionId, semesterId, classSection);
                
                await repository.AddEnrollmentAsync(newEnrollment);
                System.Console.WriteLine($"   ‚úÖ ƒê√£ th√™m enrollment: {newEnrollment.Id}");

                // B∆∞·ªõc 3: Ki·ªÉm tra l·∫°i enrollment
                System.Console.WriteLine("\nüìä B∆∞·ªõc 3: Ki·ªÉm tra enrollment sau khi th√™m");
                currentEnrollments = await repository.GetEnrollmentsByStudentInSemesterAsync(studentId, semesterId);
                System.Console.WriteLine($"   S·ªë enrollment hi·ªán t·∫°i: {currentEnrollments.Count()}");
                
                foreach (var enrollment in currentEnrollments)
                {
                    System.Console.WriteLine($"   - ID: {enrollment.Id}, Course: {enrollment.ClassSection.Name}, Active: {enrollment.IsActive}");
                }

                // B∆∞·ªõc 4: Ki·ªÉm tra business rule BR01
                System.Console.WriteLine("\nüîç B∆∞·ªõc 4: Ki·ªÉm tra business rule BR01");
                await ruleChecker.CheckMaxEnrollmentRuleAsync(studentId, semesterId);
                System.Console.WriteLine("   ‚úÖ BR01 check: PASSED");

                // B∆∞·ªõc 5: Ki·ªÉm tra enrollment status
                System.Console.WriteLine("\nüîç B∆∞·ªõc 5: Ki·ªÉm tra enrollment status");
                var isEnrolled = await repository.IsStudentEnrolledInCourseAsync(studentId, courseId, semesterId);
                System.Console.WriteLine($"   Sinh vi√™n ƒë√£ ƒëƒÉng k√Ω m√¥n h·ªçc: {isEnrolled}");

                // B∆∞·ªõc 6: X√≥a enrollment
                System.Console.WriteLine("\nüóëÔ∏è  B∆∞·ªõc 6: X√≥a enrollment");
                await repository.RemoveEnrollmentAsync(newEnrollment.Id);
                System.Console.WriteLine($"   ‚úÖ ƒê√£ x√≥a enrollment: {newEnrollment.Id}");

                // B∆∞·ªõc 7: Ki·ªÉm tra sau khi x√≥a
                System.Console.WriteLine("\nüìä B∆∞·ªõc 7: Ki·ªÉm tra sau khi x√≥a");
                currentEnrollments = await repository.GetEnrollmentsByStudentInSemesterAsync(studentId, semesterId);
                System.Console.WriteLine($"   S·ªë enrollment hi·ªán t·∫°i: {currentEnrollments.Count()}");

                isEnrolled = await repository.IsStudentEnrolledInCourseAsync(studentId, courseId, semesterId);
                System.Console.WriteLine($"   Sinh vi√™n ƒë√£ ƒëƒÉng k√Ω m√¥n h·ªçc: {isEnrolled}");

                System.Console.WriteLine("\nüéâ Demo ho√†n th√†nh th√†nh c√¥ng!");
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"‚ùå L·ªói trong demo: {ex.Message}");
            }
        }
    }
} 