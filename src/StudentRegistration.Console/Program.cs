using StudentRegistration.Application.Services;
using StudentRegistration.Application.Interfaces;
using StudentRegistration.Domain.Interfaces;
using StudentRegistration.Domain.Entities;
using StudentRegistration.Domain.Exceptions;

namespace StudentRegistration.Console
{
    /// <summary>
    /// Console Application ƒë·ªÉ demo c√°c ch·ª©c nƒÉng c·ªßa h·ªá th·ªëng ƒëƒÉng k√Ω h·ªçc ph·∫ßn
    /// </summary>
    class Program
    {
        static async Task Main(string[] args)
        {
            System.Console.WriteLine("üéì H·ªÜ TH·ªêNG ƒêƒÇNG K√ù H·ªåC PH·∫¶N");
            System.Console.WriteLine("=====================================");
            
            // T·∫°o mock repository v√† rule checker
            var mockRepository = new MockEnrollmentRepository();
            var ruleChecker = new MaxEnrollmentRuleChecker(mockRepository);
            
            while (true)
            {
                System.Console.WriteLine("\nüìã MENU CH·ª®C NƒÇNG:");
                System.Console.WriteLine("1. Test BR01 - Ki·ªÉm tra gi·ªõi h·∫°n 7 h·ªçc ph·∫ßn");
                System.Console.WriteLine("2. Test BR02 - Ki·ªÉm tra tr√πng l·ªãch h·ªçc");
                System.Console.WriteLine("3. Demo ƒëƒÉng k√Ω m√¥n h·ªçc");
                System.Console.WriteLine("4. Xem danh s√°ch enrollment hi·ªán t·∫°i");
                System.Console.WriteLine("5. Test SQLite Repository");
                System.Console.WriteLine("6. Tho√°t");
                System.Console.Write("\nüëâ Ch·ªçn ch·ª©c nƒÉng (1-6): ");
                
                var choice = System.Console.ReadLine();
                
                switch (choice)
                {
                    case "1":
                        await TestBR01(ruleChecker);
                        break;
                    case "2":
                        await TestBR02(ruleChecker);
                        break;
                    case "3":
                        await DemoEnrollment(ruleChecker, mockRepository);
                        break;
                    case "4":
                        ShowCurrentEnrollments(mockRepository);
                        break;
                    case "5":
                        await SQLiteDemo.RunDemo();
                        break;
                    case "6":
                        System.Console.WriteLine("üëã T·∫°m bi·ªát!");
                        return;
                    default:
                        System.Console.WriteLine("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!");
                        break;
                }
            }
        }

        /// <summary>
        /// Test Business Rule BR01 - Gi·ªõi h·∫°n s·ªë h·ªçc ph·∫ßn
        /// </summary>
        static async Task TestBR01(IEnrollmentRuleChecker ruleChecker)
        {
            System.Console.WriteLine("\nüß™ TEST BUSINESS RULE BR01");
            System.Console.WriteLine("================================");
            
            var testCases = new[]
            {
                new { StudentId = Guid.Parse("11111111-1111-1111-1111-111111111111"), SemesterId = Guid.Parse("20240000-0000-0000-0000-000000000000"), Description = "Sinh vi√™n c√≥ 6 m√¥n h·ªçc" },
                new { StudentId = Guid.Parse("22222222-2222-2222-2222-222222222222"), SemesterId = Guid.Parse("20240000-0000-0000-0000-000000000000"), Description = "Sinh vi√™n c√≥ 7 m√¥n h·ªçc" },
                new { StudentId = Guid.Parse("33333333-3333-3333-3333-333333333333"), SemesterId = Guid.Parse("20240000-0000-0000-0000-000000000000"), Description = "Sinh vi√™n c√≥ 8 m√¥n h·ªçc" },
                new { StudentId = Guid.Parse("44444444-4444-4444-4444-444444444444"), SemesterId = Guid.Parse("20240000-0000-0000-0000-000000000000"), Description = "Sinh vi√™n c√≥ 0 m√¥n h·ªçc" }
            };

            foreach (var testCase in testCases)
            {
                System.Console.Write($"\nüìù {testCase.Description}: ");
                
                try
                {
                    await ruleChecker.CheckMaxEnrollmentRuleAsync(testCase.StudentId, testCase.SemesterId);
                    System.Console.WriteLine("‚úÖ PASS - C√≥ th·ªÉ ƒëƒÉng k√Ω th√™m");
                }
                catch (MaxEnrollmentExceededException ex)
                {
                    System.Console.WriteLine($"‚ùå FAIL - {ex.Message}");
                }
                catch (Exception ex)
                {
                    System.Console.WriteLine($"üí• ERROR - {ex.Message}");
                }
            }
        }

        /// <summary>
        /// Test Business Rule BR02 - Tr√πng l·ªãch h·ªçc
        /// </summary>
        static async Task TestBR02(IEnrollmentRuleChecker ruleChecker)
        {
            System.Console.WriteLine("\nüß™ TEST BUSINESS RULE BR02");
            System.Console.WriteLine("================================");
            
            var studentId = Guid.Parse("11111111-1111-1111-1111-111111111111");
            var semesterId = Guid.Parse("20240000-0000-0000-0000-000000000000");

            // Test case 1: Kh√¥ng tr√πng l·ªãch
            var courseId1 = Guid.NewGuid();
            var targetSection1 = new ClassSection(Guid.NewGuid(), courseId1, "To√°n A1", "MATH101");
            targetSection1.AddScheduleSlot(new ScheduleSlot(DayOfWeek.Monday, new TimeSpan(8, 0, 0), new TimeSpan(10, 0, 0)));

            System.Console.Write("\nüìù Test kh√¥ng tr√πng l·ªãch: ");
            try
            {
                await ruleChecker.CheckScheduleConflictRuleAsync(studentId, targetSection1, semesterId);
                System.Console.WriteLine("‚úÖ PASS - Kh√¥ng tr√πng l·ªãch");
            }
            catch (ScheduleConflictException ex)
            {
                System.Console.WriteLine($"‚ùå FAIL - {ex.Message}");
            }

            // Test case 2: Tr√πng l·ªãch
            var courseId2 = Guid.NewGuid();
            var targetSection2 = new ClassSection(Guid.NewGuid(), courseId2, "L√Ω A1", "PHYS101");
            targetSection2.AddScheduleSlot(new ScheduleSlot(DayOfWeek.Monday, new TimeSpan(8, 0, 0), new TimeSpan(10, 0, 0)));

            System.Console.Write("üìù Test tr√πng l·ªãch: ");
            try
            {
                await ruleChecker.CheckScheduleConflictRuleAsync(studentId, targetSection2, semesterId);
                System.Console.WriteLine("‚úÖ PASS - Kh√¥ng tr√πng l·ªãch");
            }
            catch (ScheduleConflictException ex)
            {
                System.Console.WriteLine($"‚ùå FAIL - {ex.Message}");
            }
        }

        /// <summary>
        /// Demo quy tr√¨nh ƒëƒÉng k√Ω m√¥n h·ªçc
        /// </summary>
        static async Task DemoEnrollment(IEnrollmentRuleChecker ruleChecker, MockEnrollmentRepository repository)
        {
            System.Console.WriteLine("\nüéØ DEMO ƒêƒÇNG K√ù M√îN H·ªåC");
            System.Console.WriteLine("================================");
            
            System.Console.Write("Nh·∫≠p ID sinh vi√™n (ho·∫∑c Enter ƒë·ªÉ d√πng ID m·∫∑c ƒë·ªãnh): ");
            var studentIdInput = System.Console.ReadLine();
            var studentId = string.IsNullOrEmpty(studentIdInput) 
                ? Guid.Parse("11111111-1111-1111-1111-111111111111")
                : Guid.Parse(studentIdInput);

            System.Console.Write("Nh·∫≠p ID h·ªçc k·ª≥ (ho·∫∑c Enter ƒë·ªÉ d√πng ID m·∫∑c ƒë·ªãnh): ");
            var semesterIdInput = System.Console.ReadLine();
            var semesterId = string.IsNullOrEmpty(semesterIdInput)
                ? Guid.Parse("20240000-0000-0000-0000-000000000000")
                : Guid.Parse(semesterIdInput);

            try
            {
                // B∆∞·ªõc 1: Ki·ªÉm tra business rule BR01
                System.Console.WriteLine("\nüîç ƒêang ki·ªÉm tra business rule BR01...");
                await ruleChecker.CheckMaxEnrollmentRuleAsync(studentId, semesterId);
                System.Console.WriteLine("‚úÖ BR01 check: PASSED");

                // B∆∞·ªõc 2: Ki·ªÉm tra business rule BR02 (gi·∫£ l·∫≠p)
                System.Console.WriteLine("üîç ƒêang ki·ªÉm tra business rule BR02...");
                var courseId = Guid.NewGuid();
                var targetSection = new ClassSection(Guid.NewGuid(), courseId, "Demo Course", "DEMO101");
                targetSection.AddScheduleSlot(new ScheduleSlot(DayOfWeek.Tuesday, new TimeSpan(14, 0, 0), new TimeSpan(16, 0, 0)));
                await ruleChecker.CheckScheduleConflictRuleAsync(studentId, targetSection, semesterId);
                System.Console.WriteLine("‚úÖ BR02 check: PASSED");

                // B∆∞·ªõc 3: Th√™m enrollment (gi·∫£ l·∫≠p)
                System.Console.WriteLine("‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng!");
                System.Console.WriteLine($"üìã Th√¥ng tin: Sinh vi√™n {studentId} ƒëƒÉng k√Ω l·ªõp {targetSection.Name} h·ªçc k·ª≥ {semesterId}");
            }
            catch (MaxEnrollmentExceededException ex)
            {
                System.Console.WriteLine($"‚ùå ƒêƒÉng k√Ω th·∫•t b·∫°i (BR01): {ex.Message}");
            }
            catch (ScheduleConflictException ex)
            {
                System.Console.WriteLine($"‚ùå ƒêƒÉng k√Ω th·∫•t b·∫°i (BR02): {ex.Message}");
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"üí• L·ªói h·ªá th·ªëng: {ex.Message}");
            }
        }

        /// <summary>
        /// Hi·ªÉn th·ªã danh s√°ch enrollment hi·ªán t·∫°i
        /// </summary>
        static void ShowCurrentEnrollments(MockEnrollmentRepository repository)
        {
            System.Console.WriteLine("\nüìä DANH S√ÅCH ENROLLMENT HI·ªÜN T·∫†I");
            System.Console.WriteLine("=====================================");
            
            var enrollments = repository.GetAllEnrollments();
            
            if (!enrollments.Any())
            {
                System.Console.WriteLine("üì≠ Ch∆∞a c√≥ enrollment n√†o");
                return;
            }

            var groupedEnrollments = enrollments.GroupBy(e => new { e.StudentId, e.SemesterId });
            
            foreach (var group in groupedEnrollments)
            {
                System.Console.WriteLine($"\nüë§ Sinh vi√™n {group.Key.StudentId} - H·ªçc k·ª≥ {group.Key.SemesterId}:");
                var activeCount = group.Count(e => e.IsActive);
                var totalCount = group.Count();
                
                System.Console.WriteLine($"   üìà T·ªïng: {totalCount} m√¥n | Active: {activeCount} m√¥n");
                
                foreach (var enrollment in group)
                {
                    var status = enrollment.IsActive ? "‚úÖ" : "‚ùå";
                    System.Console.WriteLine($"   {status} L·ªõp {enrollment.SectionId} - {enrollment.EnrollmentDate:dd/MM/yyyy}");
                }
            }
        }
    }

    /// <summary>
    /// Mock repository ƒë·ªÉ demo (thay th·∫ø cho database th·∫≠t)
    /// </summary>
    public class MockEnrollmentRepository : IEnrollmentRepository
    {
        private readonly List<Enrollment> _enrollments = new();

        public MockEnrollmentRepository()
        {
            // T·∫°o d·ªØ li·ªáu m·∫´u
            InitializeMockData();
        }

        private void InitializeMockData()
        {
            var semesterId = Guid.Parse("20240000-0000-0000-0000-000000000000");

            // Sinh vi√™n 1: 6 m√¥n h·ªçc
            for (int i = 1; i <= 6; i++)
            {
                var courseId = Guid.NewGuid();
                var classSection = new ClassSection(Guid.NewGuid(), courseId, $"Course {i}", $"COURSE{i:000}");
                var enrollment = new Enrollment(
                    Guid.Parse("11111111-1111-1111-1111-111111111111"), 
                    classSection.Id, 
                    semesterId, 
                    classSection)
                {
                    Id = Guid.NewGuid(),
                    IsActive = true
                };
                _enrollments.Add(enrollment);
            }

            // Sinh vi√™n 2: 7 m√¥n h·ªçc
            for (int i = 1; i <= 7; i++)
            {
                var courseId = Guid.NewGuid();
                var classSection = new ClassSection(Guid.NewGuid(), courseId, $"Course {i + 10}", $"COURSE{i + 10:000}");
                var enrollment = new Enrollment(
                    Guid.Parse("22222222-2222-2222-2222-222222222222"), 
                    classSection.Id, 
                    semesterId, 
                    classSection)
                {
                    Id = Guid.NewGuid(),
                    IsActive = true
                };
                _enrollments.Add(enrollment);
            }

            // Sinh vi√™n 3: 8 m√¥n h·ªçc
            for (int i = 1; i <= 8; i++)
            {
                var courseId = Guid.NewGuid();
                var classSection = new ClassSection(Guid.NewGuid(), courseId, $"Course {i + 20}", $"COURSE{i + 20:000}");
                var enrollment = new Enrollment(
                    Guid.Parse("33333333-3333-3333-3333-333333333333"), 
                    classSection.Id, 
                    semesterId, 
                    classSection)
                {
                    Id = Guid.NewGuid(),
                    IsActive = true
                };
                _enrollments.Add(enrollment);
            }

            // Sinh vi√™n 4: 5 active + 3 inactive
            for (int i = 1; i <= 5; i++)
            {
                var courseId = Guid.NewGuid();
                var classSection = new ClassSection(Guid.NewGuid(), courseId, $"Course {i + 30}", $"COURSE{i + 30:000}");
                var enrollment = new Enrollment(
                    Guid.Parse("44444444-4444-4444-4444-444444444444"), 
                    classSection.Id, 
                    semesterId, 
                    classSection)
                {
                    Id = Guid.NewGuid(),
                    IsActive = true
                };
                _enrollments.Add(enrollment);
            }
            for (int i = 6; i <= 8; i++)
            {
                var courseId = Guid.NewGuid();
                var classSection = new ClassSection(Guid.NewGuid(), courseId, $"Course {i + 30}", $"COURSE{i + 30:000}");
                var enrollment = new Enrollment(
                    Guid.Parse("44444444-4444-4444-4444-444444444444"), 
                    classSection.Id, 
                    semesterId, 
                    classSection)
                {
                    Id = Guid.NewGuid(),
                    IsActive = false
                };
                _enrollments.Add(enrollment);
            }
        }

        public Task<IEnumerable<Enrollment>> GetEnrollmentsByStudentInSemesterAsync(Guid studentId, Guid semesterId)
        {
            var result = _enrollments.Where(e => e.StudentId == studentId && e.SemesterId == semesterId);
            return Task.FromResult(result);
        }

        public Task AddEnrollmentAsync(Enrollment enrollment)
        {
            _enrollments.Add(enrollment);
            return Task.CompletedTask;
        }

        public Task RemoveEnrollmentAsync(Guid enrollmentId)
        {
            var enrollment = _enrollments.FirstOrDefault(e => e.Id == enrollmentId);
            if (enrollment != null)
            {
                _enrollments.Remove(enrollment);
            }
            return Task.CompletedTask;
        }

        public Task<bool> IsStudentEnrolledInCourseAsync(Guid studentId, Guid courseId, Guid semesterId)
        {
            var isEnrolled = _enrollments.Any(e => 
                e.StudentId == studentId && 
                e.ClassSection.CourseId == courseId && 
                e.SemesterId == semesterId && 
                e.IsActive);
            return Task.FromResult(isEnrolled);
        }

        public IEnumerable<Enrollment> GetAllEnrollments()
        {
            return _enrollments;
        }
    }
} 